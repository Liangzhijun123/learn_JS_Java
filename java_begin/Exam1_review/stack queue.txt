Stacks
- Definition: A stack is a data structure that follows the LIFO (Last In, First Out) principle. The last element added to the stack is the first one to be removed.

- Common problems where stacks are used:
    - Balancing parentheses: Check if parentheses, brackets, or braces are properly opened and closed in code.
    - Undo operations: In applications where the user can undo/redo actions, such as in a text editor.
    - Depth-first search (DFS): Used in graph traversal algorithms.
    - Evaluating postfix expressions (or converting infix to postfix).
    - Backtracking problems like maze-solving, where you need to keep track of previous states.

- Stack Operations:
    - push(data): Add an element to the top of the stack.
    - pop(): Remove and return the element from the top of the stack.
    - peek(): Return the top element without removing it.
    - isEmpty(): Check if the stack is empty.

Queues
- Definition: A queue is a data structure that follows the FIFO (First In, First Out) principle. The first element added to the queue is the first one to be removed.

- Common problems where queues are used:
    - Breadth-first search (BFS): In graph and tree traversal algorithms.
    - Task scheduling: Where tasks are processed in the order they are received, like in a printer queue.
    - Producer-Consumer problem: Where one entity produces items and another entity consumes them.
    - Call center or service queue simulation: When simulating how customers are handled in a service line.

- Queue Operations:
    - enqueue(data): Add an element to the back of the queue.
    - dequeue(): Remove and return the front element.
    - peek(): Return the front element without removing it.
    - isEmpty(): Check if the queue is empty.

Summary of Stack vs Queue:
Stack: LIFO, used in scenarios like undo functionality, DFS, and expression evaluation.
Queue: FIFO, used in task scheduling, BFS, and managing resources in an order.