// successful search
   /*
    * 1. Generate a data set with 1000 integers between 1 and 10,000. dont make
    * array 100 by 100. just one array and repopulate everytime with new value.
    * 2. For each element in the data set, find that element using linear, binary,
    * and interpolation search and record how many operations this took to find
    * each element
    * 3. Compute the average number of operations it took to find each element for
    * each search algorithm
    * 4. Repeat Steps 1-3 for a total of 100 times. making 100 sets of random data,
    * sort, and find it.
    * 5. Compute the average number of operations for each search algorithm over
    * the 100 data sets. Wants to do it lots of times to see the avg.
    */

   // unsuccessful search
   /*
    * 1. Generate a data set with 1000 integers between 1 and 10,000. sort it.
    * 2. Generate 1000 random numbers between 1 and 10,000 that are NOT in the data
    * set (use ANY search algorithm to determine whether this number is in the data
    * set or not)
    * a: create a second array with Array that does not have any element in the old
    * array.
    * - to do this: you can use one of the binary search method to saerch for the
    * old array, if is not i can put in the second array.
    * if it is in the old array, then i have to regenerate. the second array can
    * not have the same array as old array
    * 3. Search for the random numbers that were not in the data set using linear,
    * binary, and interpolation search and record how many operations this took for
    * each number.
    * a: search for second array in the element
    * 4. Compute the average number of operations it took to NOT find each number
    * for each search algorithm
    * 5. Repeat Steps 1-4 for a total of 100 times
    * 6. Compute the average number of operations for each search algorithm over
    * the 100 data sets
    */